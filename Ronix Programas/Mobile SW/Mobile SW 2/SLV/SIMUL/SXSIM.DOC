SXSIM.DOC        MAR-07-98

SxSim is a simulator for the Scenix SX18 and SX28 microcontrollers. If
you've used Parallax's PSIM, SxSim should look familiar. It runs under DOS
and it's easy to use.

SxSim requires a .LST file, which is generated by either Microchip's MPASM
or Parallax's SPASM (/L). Assemblers other than MPASM 1.30 through 2.01 or
SPASM 4.7 might not work because SxSim is very particular about the format.
Start the simulator by typing: SXSIM MYFILE, where MYFILE is the name of
your .LST file. The .LST is assumed and need not be typed.

When SxSim starts, it simulates a power-on reset. Most of the registers
come up in a random state.

The spacebar is used to single step through a routine to see how it works.
If you want to take a closer look at some steps, back up using the
backspace key and step through them again. If you want to run the routine,
press F9. The simulation will go until a key is struck or a breakpoint is
reached.

The colors you see changing on the top half of the screen show the action
as your program executes. When a number changes, it's momentarily displayed
in white to draw your attention to it. The green background point out the
registers and status bits used by the instruction about to be executed.

The W register is displayed on the left side. Its contents are shown in
hex, ASCII, and binary. The individual bits of the status register are
shown to the right of the W register. The I/O ports (RA, RB, RC) are shown
both in hex (on the left) and in binary (on the right).

There are two kinds of cursors in the listing window. The green one shows
the location of the program counter (PC), and the black one is the line
cursor. The line cursor is used to move through the code and to set
breakpoints, which are red.

Here's a list of all the commands:

       F1  Help    Show this help screen
       F2  Bkpt    Set or clear breakpoint at line cursor (toggles)
       F3  Clear   Remove all breakpoints
       F4  Here    Execute code until line cursor is reached
       F5  Time    Reset elapsed time to zero
       F6  Go      Execute code and display result for each instruction
       F7  Step    Execute one instruction
       F8  Over    Same as F7 but skip over CALLs (run them at full speed)
       F9  Run     Execute code at full speed (until breakpoint)
       F10 MClr    Simulate master clear (hardware reset)
   Alt:
       F1  Output  Show screen used for OUTPUT instruction
       F3  Count   Show instruction execution counts
       F4  Jump    Jump to line-cursor location (without executing)
       F6  Slow    Execute and display at slow speed (Go Slow)
       F7  Back    Undo last instruction (step backward)
       F8  Return  Execute until return to caller (skip rest of CALL)
       F10 Reset   Simulate master clear and zero registers

       Spacebar    Execute one instruction (same as F7 and Enter)
       Backspace   Undo last instruction (same as Alt+F7)

       ^ v         Up and down arrows move line cursor up or down a line
       Page Up/Dn  Move line cursor up or down a page
       Home        Move line cursor to location 000
       End         Move line cursor to last location

       Mouse       Left button:  Increment value / Set or clear breakpoint
                   Right button: Decrement value / Execute up to here
       Esc         Exit back to operating system



MOUSE

The mouse is used to change values in registers. The left button increments
the value under the cursor, and the right button decrements it. Holding the
button auto-repeats. An important use of the mouse is to change the inputs
on the port pins. The values for the IND (indirect) register and the WDT
(watchdog timer) cannot be changed with the mouse. Clicking on the time
resets it to 0.000.

The oscillator frequency is adjusted by clicking on it with the mouse. To
change megahertz to kilohertz, click on the "M" with the right mouse
button. Changing the frequency, of course, changes the time it takes to
execute instructions. The frequency ranges from 1.0 kHz to 1.0 GHz.

In the listing window, pressing the left mouse button sets or clears a
breakpoint. Pressing the right mouse button executes code up to the line
the mouse cursor is on.

The commands listed at the bottom of the screen can be executed by clicking
on them or by pressing the function keys. Clicking on "F7=Step" with the
right mouse button steps backwards. The [þ] symbol in the upper-left corner
is the program exit button.



FUSE BITS

The configuration registers are normally set like this:

                   FUSE    FUSEX
        For SX:     0FB     7FE
        For PIC:    FFB     7FA

These values are saved in a file with the same name as your .LST file,
but with a .CFG extension. You can edit this file directly or use the
mouse to change these values on the screen. If the .CFG file is not found
then the values default to the SX settings (0FB & 7FE).

The size of the instruction memory is determined by the highest location
used in the .LST file. The size can be either 512, 1K, 2K, or 4K words.
The configuration bits in FUSEX are automatically set to indicate the
size. (Using SXDEFS.INC to define DEVICE, sets the FUSE and FUSEX bits
automatically and overrides any other settings.)

If FUSEX bits 10 and 11 are cleared (00) then the 18-pin part is simulated.
Port RC is disabled, and location 07h is an additional byte of RAM.



MISCELLANEOUS

The value displayed for I/O ports is the value on the pins. This is the
value your program sees when it reads a port. A value written to a port is
written to the latch. What actually appears on the pins depends on the
tristate register (TRIS).

The SLEEP instruction is correctly simulated when the WDT is enabled, but
it works like a breakpoint when the WDT is disabled.

The new instructions, such as RET and IREAD, can be replaced by macros or
DATA instructions (see SXDEFS.INC). This works for MPASM but not SPASM. If
you're desperate, you can always modify the opcodes in the .LST file using
a text editor. When using macros, NOEXPAND should not be used since SxSim
relies on the .LST file for its input. Also be careful how you use NOLIST.

SxSim recognizes three instructions that aren't in the microcontroller
chip. The INPUT instruction (00Ah) sets the W register to the ASCII value
of a key struck on the keyboard. The Esc key is used to return normal
operation to the simulator. The OUTPUT instruction (00Bh) displays the
character corresponding to the value in the W register on an alternate
screen. Use Alt-F1 to view this screen. The PRINT instruction (001h) prints
the value in the W register on the printer.

Instructions leave tracks by displaying a dot after the address once
they're executed. This is useful when you want to verify that all paths
through a routine have been tested. Similarly, file registers that have
been written to, or initialized, are also marked with a dot.

Cycle counts are not displayed. If you prefer to think in terms of cycle
counts rather than time, then select an oscillator frequency of 1.000 MHz.
This makes each cycle take exactly one microsecond, and the TIME display
can thought of as a cycle counter. If you're simulating a PIC, which
divides the oscillator frequency by four, then set the frequency to 4.000M.

SxSim automatically stretches to the size of the display. I like to run the
program L36, which gives 36 lines with a nice clean font, before running
SXSIM. L25 gets you back to the standard 25-line display. The batch file
SS.BAT does all this automatically.



STIMULUS FILES

Input pins not only can be changed with the mouse, but they also can be
changed using a stimulus file. A stimulus file specifies the inputs and
when they occur. Here's an example of a command line in a stimulus file:

        T=5E-6 RA=3      ;Comment

This sets port RA to 3 (0011b) after the program has been running for a
simulated 5.0 microseconds.

The format is similar to that used by PSIM. Numbers must be terminated by a
non-numeric character such as a space or comma. Either upper or lower case
characters can be used. Comments are preceded with a semicolon just like in
assembly code.

The other ports, RB and RC, also can be set. The port value is always in
hex. For example: RB=f3. More than one port can be set on the same line,
and individual bits can be set or cleared like this: RC5=1, rb2=0. The RTCC
pin can be set or cleared with: RTCC=1 or RTCC=0.

Time also can be specified as an interval (or delta) since the last
command. For example: dt=.001 rb7=0 sets the high bit of RB one millisecond
after the previous command.

When SxSim starts, it searches for a stimulus file. If it finds a file with
a .STM extension and a name matching the input (.LST) file, it loads it as
the stimulus file. For instance, HELLO.STM is the stimulus file for
HELLO.LST. If the file is not found then a stimulus file is not used.



CHECKPOINTS

You can save the state of your simulated program any time using a
checkpoint. Everything is saved to a disk file, including registers,
breakpoint locations, and the history memory used by the backup command.

To save a checkpoint press Shift+Fn, where Fn is one of the function keys
F1 through F10. The saved information can be restored later by pressing
Ctrl+Fn.

For example, you could have a program with a delay loop that takes many
seconds to reach the code you're trying to test. When you reach this code,
if you press Shift+F3, you can immediately return to this point by pressing
Ctrl+F3. This lets you test several scenarios without having to wait while
the program runs through the delay loop each time.

You can even exit the simulator, make a modification to your code, restart
the simulator, then press Ctrl+F3 to immediately get back to where you
were. However, there's a danger that breakpoints can shift on you if you
change the number of instructions. Things can really fall apart if your
modifications are extensive, or if you try to back through them using the
backspace key. Also, please don't try to load a checkpoint from an earlier
version of SxSim.



WINDOWS

SxSim is intentionally designed as an alternative to Windows-based simu-
lators such as MPLAB. If you run it under Windows 95 and you're concerned
about speed, you might consider trading in your Pentium for a 286. SxSim
runs an unbelievable 35 times slower under Windows 95 than it does under
DOS 5.00. You can greatly speed it up (about 2/3 the DOS speed) by doing
the following:

   Run SxSim in a window (Alt+Enter flips between full screen and a window).
   Click on the MSDOS icon in the upper-left corner of the window.
   Select Properties.
   Select Misc.
   Move the Idle sensitivity slider all the way to Low.



PROBLEMS

Here's a list of known problems and deficiencies. (Dare I say, BUGS?)

Labels should not be on a line by themselves since lines without
instruction mnemonics are not shown in the listing window. (PSIM has this
problem too.)

INCFSZ PC takes 2 or 3 cycles in compatible mode and 2 or 4 cycles in
turbo mode.

The backup command (backspace key) does not restore registers changed
with the mouse. PIN inputs are not restored whether changed by the mouse
or by a .STM file.

The multi-input wake-up pending register (WKPND_B) is not implemented.

Analog signals such as TTL and CMOS levels, pullups, Schmitt-triggers, and
the comparator on port RB are not simulated.


The following problems can occur when using MPASM:

The DT, DW, DB, DATA, instructions don't load properly when they generate
more than one opcode. (PSIM doesn't handle this either.)

If a title looks like an instruction, it will cause problems. For example,
this will load 004 into location 0BE: TITLE "0Be 04 Confuses SxSim"

The __CONFIG instruction can cause a problem. For a 16C58A, __CONFIG 0123h
makes the simulator think there is 4K of instruction memory (instead of 2K)
and loads location 0FFF with 0123.



LICENSE

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License version 2 as published by
the Free Software Foundation.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License along
with this program (in the file LICENSE.DOC); if not, write to the Free
Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.



Thanks for your interest in SxSim.

-Loren Blaney

Email: loren_blaney@idcomm.com     Regular Mail: 502 Pine Glade Dr.
                                                 Nederland, CO 80466
Updates can be downloaded from:                  USA
http://www.brouhaha.com/~eric/scenix/sxsim/
