MPASM 01.30 Released            HELLO.ASM   3-21-1998  10:58:17         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00001 ;HELLO.ASM      MAR-21-98
                    00002 ;"Hello World!" demo with 2-for-1 compression on the Scenix Micro
                    00003 ; by Loren Blaney
                    00004 ;
                    00005 ;The ability of the Scenix processor to read program memory is used to pack
                    00006 ; two 6-bit characters into a word. Normally the RETLW instruction would
                    00007 ; be used, but that only takes advantage of 8 of the 12 bits in a word.
                    00008 ;
                    00009 
                    00010         PROCESSOR 16C54         ;closest PIC chip
                    00011         RADIX   DEC
                    00012         ERRORLEVEL -305,-306    ;",F" is the default; page boundaries are ok
                    00013         LIST    ST=OFF
                    00014 
                    00015         INCLUDE "SXDEFS.INC"    ;macro definitions for new instructions
                    00184         LIST
1010 0F0C           00185         DATA    _FUSE           ;configuration bits (TURBO, SYNC, OPTIONX, etc.)
1011 0070           00186         DATA    _FUSEX          ; (PINS, CARRYX, BOR40, BANKS, PAGES)
                    00190         LIST
  000000F5          00016 DEVICE  EQU     OSC4MHZ+WATCHDOG
                    00017 
                    00018 
0007                00019         ORG     07h
0007                00020 TEMP    RES     1               ;universal temporary scratch location
                    00021 
                    00022 ;Variables for MSGOUT routine:
0008                00023 MSGPTR  RES     2               ;pointer to words in instruction memory
000A                00024 MSG2ND  RES     1               ;holds the second of a pair of characters
                    00025 
  0000000D          00026 CR      EQU     0Dh             ;ASCII characters
  0000000A          00027 LF      EQU     0Ah
                    00028 
                    00029 TEXT    MACRO   A,B             ;pack two ASCII characters into a 12-bit word
                    00030         DATA    (A-1Ch & 03Fh)<<6  |  B-1Ch & 03Fh
                    00031         ENDM
                    00032 
                    00033 
0000                00034         ORG     0
                    00035 ;-------------------------------------------------------------------------------
                    00036 ;Output the character in W to the printer
                    00037 ;
0000 0004           00038 CHOUT   CLRWDT                  ;reset watchdog timer
0001 0605           00039         BTFSC   RA,0            ;loop until not busy (busy = 1)
0002 0A00           00040          GOTO   CHOUT
0003 0026           00041         MOVWF   RB              ;send byte to printer
                    00042 
                    00043 ;       PRINTX                  ;simulator print command
                    00044 
0004 0425           00045         BCF     RA,1            ;set strobe low (active) for at least 0.5us
0005 0525           00046         BSF     RA,1            ;set strobe high (inactive)
                    00047         RETP
0006 000D               M         DATA    0Dh     ;RETP   ;RET & write return addr bits 10:9 into PA1:PA0
                    00048 
MPASM 01.30 Released            HELLO.ASM   3-21-1998  10:58:17         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00049 ;-------------------------------------------------------------------------------
                    00050 ;Print the message pointed to by W and MODE. The W register contains the low 8
                    00051 ; bits of the address, and MODE contains the high 4 bits. Messages can span
                    00052 ; page boundaries. The W and MODE registers are changed, along with TEMP.
                    00053 ;
                    00054 ;Messages are written using ASCII character codes 20h thru 5Fh. The TEXT macro
                    00055 ; packs two characters into a 12-bit word. Some characters have special meaning:
                    00056 ;   \ = Reserved. (Used to loop back for second character.)
                    00057 ;   ] = String terminator (end of text).
                    00058 ;   ^ = Shift case (toggles upper/lower).
                    00059 ;   _ = New line (CR+LF).
                    00060 ;
0007 0028           00061 MSGOUT  MOVWF   MSGPTR          ;save pointer to message
                    00062         MOVMW
0008 0042               M         DATA    42h     ;MOVMW  ;move MODE register to W register
0009 0029           00063         MOVWF   MSGPTR+1        ;also clear bit 5 to select uppercase letters
                    00064 
000A 0209           00065 MO10    MOVF    MSGPTR+1,W      ;move MSGPTR into MODE:W
                    00066         MOVWM                   ; copy low 4 bits in W into MODE
000B 0043               M         DATA    43h     ;MOVWM  ;move W register to MODE register
000C 0208           00067         MOVF    MSGPTR,W        ; copy low 8 bits of MSGPTR into W
                    00068         IREAD                   ;move instruction word at (MODE:W) to MODE:W
000D 0041               M         DATA    41h     ;IREAD  ;move instruction at (MODE:W) to MODE:W
                    00069 
000E 002A           00070         MOVWF   MSG2ND          ;save second character
                    00071         MOVMW                   ;copy MODE to W to TEMP
000F 0042               M         DATA    42h     ;MOVMW  ;move MODE register to W register
0010 0027           00072         MOVWF   TEMP
0011 036A           00073         RLF     MSG2ND          ;form first character (6 bits) in TEMP
0012 0367           00074         RLF     TEMP            ; TEMP <-- MSG2ND
0013 034A           00075         RLF     MSG2ND,W
0014 0367           00076         RLF     TEMP
                    00077 
0015 02E7           00078 MO20    DECFSZ  TEMP            ;test for special characters:
0016 0A18           00079          GOTO   MO30
                    00080         RETP                    ;1 = ] = string terminator
0017 000D               M         DATA    0Dh     ;RETP   ;RET & write return addr bits 10:9 into PA1:PA0
                    00081 
0018 02E7           00082 MO30    DECFSZ  TEMP
0019 0A1D           00083          GOTO   MO40
001A 0C20           00084         MOVLW   20h             ;2 = ^ = shift case
001B 01A9           00085         XORWF   MSGPTR+1        ;toggle the case-shift flag bit
001C 0A29           00086         GOTO    MO60
                    00087 
001D 02E7           00088 MO40    DECFSZ  TEMP
001E 0A23           00089          GOTO   MO50
001F 0C0D           00090         MOVLW   CR              ;3 = _ = new line (CR & LF)
0020 0900           00091         CALL    CHOUT
0021 0C0A           00092         MOVLW   LF
0022 0A28           00093         GOTO    MO55
                    00094 
0023 0C1F           00095 MO50    MOVLW   1Fh             ;add offset to convert back to ASCII
0024 01E7           00096         ADDWF   TEMP
MPASM 01.30 Released            HELLO.ASM   3-21-1998  10:58:17         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0025 0209           00097         MOVF    MSGPTR+1,W      ;shift to uppercase if the case-shift bit
0026 0E20           00098         ANDLW   20h             ; is set
0027 0107           00099         IORWF   TEMP,W
0028 0900           00100 MO55    CALL    CHOUT           ;output the ASCII character
                    00101 
0029 030A           00102 MO60    RRF     MSG2ND,W        ;undo the RLF above
002A 006A           00103         CLRF    MSG2ND          ;zero it for next time thru loop (0 = \)
002B 0E3F           00104         ANDLW   3Fh             ;mask off garbage and set Z status
002C 0027           00105         MOVWF   TEMP            ;get copy into TEMP (w/o changing status)
002D 0743           00106         BTFSS   STATUS,Z
002E 0A15           00107          GOTO   MO20            ;loop back for second character
                    00108 
002F 03E8           00109         INCFSZ  MSGPTR          ;loop until terminator is found
0030 0A0A           00110          GOTO   MO10
0031 02A9           00111         INCF    MSGPTR+1        ;(in case string spans a page boundary)
0032 0A0A           00112          GOTO   MO10
                    00113 
                    00114 ;-------------------------------------------------------------------------------
                    00115 ;Initialize parallel output port to the printer
                    00116 ;
0033 0004           00117 INIT    CLRWDT                  ;reset watchdog timer
0034 0C00           00118         MOVLW   00h             ;internal instruction clock
0035 0002           00119         OPTION                  ;(6-bit option register--no RTCC interrupts)
                    00120 
0036 0CFD           00121         MOVLW   0FDh            ;PORT A:
0037 0005           00122         TRIS    RA              ; bit 0 = input (printer busy line)
                    00123                                 ; bit 1 = output (printer strobe line)
0038 0525           00124         BSF     RA,1            ;set strobe high (inactive)
                    00125 
0039 0C00           00126         MOVLW   00h             ;make all port B bits outputs
003A 0006           00127         TRIS    RB
                    00128         RETP
003B 000D               M         DATA    0Dh     ;RETP   ;RET & write return addr bits 10:9 into PA1:PA0
                    00129 
                    00130 ;-------------------------------------------------------------------------------
                    00131 ;Entry point
                    00132 ;
003C 0933           00133 START   CALL    INIT            ;initialize parallel output port
                    00134 
                    00135 LOOP    MODE    MSG >> 8        ;get pointer to message
003D 0050               M         DATA    50h|MSG >> 8 ;MODE   ;write N into MODE register (N = 0-F)
003E 0C41           00136         MOVLW   MSG & 0FFh
003F 0907           00137         CALL    MSGOUT          ;output message
0040 0A3D           00138         GOTO    LOOP            ;loop forever
                    00139 
                    00140 
                    00141 MSG     TEXT    'H', '^'        ;Hello World!<CRLF>
0041 0B02               M         DATA    ('H'-1Ch & 03Fh)<<6  |  '^'-1Ch & 03Fh
                    00142         TEXT    'E', 'L'
0042 0A70               M         DATA    ('E'-1Ch & 03Fh)<<6  |  'L'-1Ch & 03Fh
                    00143         TEXT    'L', 'O'
0043 0C33               M         DATA    ('L'-1Ch & 03Fh)<<6  |  'O'-1Ch & 03Fh
                    00144         TEXT    ' ', '^'
MPASM 01.30 Released            HELLO.ASM   3-21-1998  10:58:17         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0044 0102               M         DATA    (' '-1Ch & 03Fh)<<6  |  '^'-1Ch & 03Fh
                    00145         TEXT    'W', '^'
0045 0EC2               M         DATA    ('W'-1Ch & 03Fh)<<6  |  '^'-1Ch & 03Fh
                    00146         TEXT    'O', 'R'
0046 0CF6               M         DATA    ('O'-1Ch & 03Fh)<<6  |  'R'-1Ch & 03Fh
                    00147         TEXT    'L', 'D'
0047 0C28               M         DATA    ('L'-1Ch & 03Fh)<<6  |  'D'-1Ch & 03Fh
                    00148         TEXT    '!', '_'
0048 0143               M         DATA    ('!'-1Ch & 03Fh)<<6  |  '_'-1Ch & 03Fh
                    00149         TEXT    ']', 0
0049 0064               M         DATA    (']'-1Ch & 03Fh)<<6  |  0-1Ch & 03Fh
                    00150 
                    00151 
01FF                00152         ORG     01FFh           ;reset vector
01FF 0A3C           00153         GOTO    START
                    00154 
                    00155         END


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXX------ ---------------- ---------------- ----------------
0180 : ---------------- ---------------- ---------------- ----------------
01C0 : ---------------- ---------------- ---------------- ---------------X
1000 : ---------------- XX-------------- ---------------- ----------------
1040 : ---------------- ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:    75
Program Memory Words Free:   437


Errors   :     0
Warnings :     0 reported,     2 suppressed
Messages :     0 reported,    10 suppressed

